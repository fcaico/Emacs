This is semantic.info, produced by makeinfo version 4.0 from
semantic.texi.

START-INFO-DIR-ENTRY
* semantic: (semantic).       Semantic Parsing for Emacs
END-INFO-DIR-ENTRY


File: semantic.info,  Node: Token Details,  Next: Local Context,  Prev: Token->Text,  Up: Override Methods

Token Details
-------------

   These functions help derive information about tokens that may not be
obvious for non-traditional languages with their own token types.

 - Function: semantic-nonterminal-children token &optional
          positionalonly
     Return the list of top level children belonging to TOKEN.
     Children are any sub-tokens which may contain overlays.  The
     default behavior (if not overriden with `nonterminal-children' is
     to return type parts for a type, and arguments for a function.

     If optional argument POSITIONALONLY is non-`nil', then only return
     valid children if they contain positions.  Some languages may
     choose to create lists of children without position/overlay
     information.

     If this function is overriden, use
     "semantic-nonterminal-children-default" to also include the
     default behavior, and merely extend your own.

     Note for language authors:   If a mode defines a language that has
     tokens in it with overlays that should not be considered children,
     you should still return them with this function.  If you do not,
     then token reparsing, and database saving will fail.

 - Function: semantic-nonterminal-protection token &optional parent
     Return protection information about TOKEN with optional PARENT.
     This function returns on of the following symbols:    `nil'      -
     No special protection.  Language dependent.     `'public'  -
     Anyone can access this TOKEN.     `'private' - Only methods in the
     local scope can access TOKEN.     `'friend'  - Like private,
     except some outer scopes are allowed               access to token.
     Some languages may choose to provide additional return symbols
     specific to themselves.  Use of this function should allow for
     this.

     The default behavior (if not overriden with `nonterminal-children'
     is to return a symbol based on type modifiers.

 - Function: semantic-find-dependency token
     Find the filename represented from TOKEN.  TOKEN may be a stripped
     element, in which case PARENT specifies a parent token that has
     positinal information.  Depends on
     `semantic-dependency-include-path' for searching.  Always searches
     `.' first, then searches additional paths.

      - Variable: semantic-dependency-include-path
          Defines the include path used when searching for files.  This
          should be a list of directories to search which is specific to
          the file being included.  This variable can also be set to a
          single function.  If it is a function, it will be called with
          one arguments, the file to find as a string, and  it should
          return the full path to that file, or nil.


 - Function: semantic-find-nonterminal token &optional parent
     Find the location of TOKEN.  TOKEN may be a stripped element, in
     which case PARENT specifies a parent token that has position
     information.  Different behaviors are provided depending on the
     type of token.  For example, dependencies (includes) will seek out
     the file that is depended on, and functions will move to the
     specified definition.

 - Function: semantic-find-documentation token
     Find documentation from TOKEN and return it as a clean string.
     TOKEN might have DOCUMENTATION set in it already.  If not, there
     may be some documentation in a comment preceding TOKEN's
     definition which we cal look for.  When appropriate, this can be
     overridden by a language specific enhancement.


File: semantic.info,  Node: Local Context,  Next: Making New Methods,  Prev: Token Details,  Up: Override Methods

Local Context
-------------

 - Function: semantic-up-context &optional point
     Move point up one context from POINT.  Return non-`nil' if there
     are no more context levels.  Overloaded functions using
     `up-context' take no parameters.

 - Function: semantic-beginning-of-context &optional point
     Move POINT to the beginning of the current context.  Return
     non-`nil' if there is no upper context.  The default behavior uses
     "semantic-up-context".  It can be overridden with
     `beginning-of-context'.

 - Function: semantic-end-of-context &optional point
     Move POINT to the end of the current context.  Return non-`nil' if
     there is no upper context.  Be default, this uses
     "semantic-up-context", and assumes parenthetical block delimiters.
     This can be overridden with `end-of-context'.

 - Function: semantic-get-local-variables &optional point
     Get the local variables based on POINT's context.  Local variables
     are returned in Semantic token format.  Be default, this
     calculates the current bounds using context blocks navigation,
     then uses the parser with `bovine-inner-scope' to parse tokens at
     the beginning of the context.  This can be overriden with
     `get-local-variables'.

 - Function: semantic-get-local-arguments &optional point
     Get arguments (variables) from the current context at POINT.
     Parameters are available if the point is in a function or method.
     This function returns a list of tokens.  If the local token returns
     just a list of strings, then this function will convert them to
     tokens.  Part of this behavior can be overridden with
     `get-local-arguments'.

 - Function: semantic-get-all-local-variables &optional point
     Get all local variables for this context, and parent contexts.
     Local variables are returned in Semantic token format.  Be
     default, this gets local variables, and local arguments.  This can
     be overridden with `get-all-local-variables'.  Optional argument
     POINT is the location to start getting the variables from.

   These next set of functions handle local context parsing.   This
means looking at the code (locally) and navigating, and fetching
information such as a the type of the parameter the cursor may be
typing in.

 - Function: semantic-end-of-command
     Move to the end of the current command.  Be default, uses
     `semantic-command-separation-character'.  Override with
     `end-of-command'.

 - Function: semantic-beginning-of-command
     Move to the beginning of the current command.  Be default, users
     `semantic-command-separation-character'.  Override with
     `beginning-of-command'.

 - Function: semantic-ctxt-current-symbol &optional point
     Return the current symbol the cursor is on at POINT in a list.
     This will include a list of type/field names when applicable.
     This can be overridden using `ctxt-current-symbol'.

 - Function: semantic-ctxt-current-assignment &optional point
     Return the current assignment near the cursor at POINT.  Return a
     list as per "semantic-ctxt-current-symbol".  Return `nil' if there
     is nothing relevant.  Override with `ctxt-current-assignment'.

 - Function: semantic-ctxt-current-function &optional point
     Return the current function the cursor is in at POINT.  The
     function returned is the one accepting the arguments that the
     cursor is currently in.  This can be overridden with
     `ctxt-current-function'.

 - Function: semantic-ctxt-current-argument &optional point
     Return the current symbol the cursor is on at POINT.  Override
     with `ctxt-current-argument'.

   Local Context analysis functions can look at the local context, and
return informatin such as the type of the data that should be entered
where the cursor is.  As of this writing, these functions need some
more work.

 - Function: semantic-suggest-lookup-item name &optional tokentype
          returntype
     Find a token definition matching NAME with TOKENTYPE.  Optional
     RETURNTYPE is a return value to match against also.

 - Function: semantic-suggest-variable-token-hierarchy
     Analyze the current line, and return a series of tokens.  The
     tokens represent a hierarchy of dereferences.  For example, a
     variable name will return a list with one token representing that
     variable's declaration.  If that variable is being dereferenced,
     then return a list starting with the variable declaration,
     followed by all fields being extracted.

     For example, in c, "foo->bar" would return a list (VARTOKEN
     FIELDTOKEN) where VARTOKEN is a semantic token of the variable
     foo's declaration.  FIELDTOKEN is either a string, or a semantic
     token representing the field in foo's type.


File: semantic.info,  Node: Making New Methods,  Prev: Local Context,  Up: Override Methods

Local Context
-------------


File: semantic.info,  Node: Parser Hooks,  Prev: Override Methods,  Up: Utilities

Parser Hooks
============

   If you write a program that uses the stream of tokens in a persistent
display or database, it is necessary to know when tokens change so that
your displays can be updated.  This is especially important as tokens
can be replaced, changed, or deleted, and the associated overlays will
then throw errors when you try to use them.  Complete integration with
token changes can be achieved via several very important hooks.

   One interesting way to interact with the parser is to let it know
that changes you are going to make will not require reparsing.

 - Variable: semantic-edits-are-safe
     When non-`nil', modifications do not require a reparse.  This
     prevents tokens from being marked dirty, and it prevents top level
     edits from causing a cache check.  Use this when writing programs
     that could cause a full reparse, but will not change the tag
     structure, such as adding or updating top-level comments.

   Next, it is sometimes useful to know what the current parsing state
is.  These function can let you know what level of reparsing may be
needed.  Careful choices on when to reparse can make your program much
faster.

 - Function: semantic-bovine-toplevel-full-reparse-needed-p &optional
          checkcache
     Return non-`nil' if the current buffer needs a full reparse.
     Optional argument CHECKCACHE indicates if the cache check should
     be made.

 - Function: semantic-bovine-toplevel-partial-reparse-needed-p
          &optional checkcache
     Return non-`nil' if the current buffer needs a partial reparse.
     This only returns non-`nil' if
     "semantic-bovine-toplevel-full-reparse-needed-p" returns nil.
     Optional argument CHECKCACHE indicates if the cache check should
     be made when checking
     "semantic-bovine-toplevel-full-reparse-needed-p".

   If you need very close interaction with the user's editing, then
these two hooks can be used to find out when a given tag is being
changed.  These hooks could even be used to cut down on reparsing if
used correctly.

   For all hooks, make sure you are careful to add it as a local hook if
you only want to effect a single buffer.  Setting it globally can cause
unwanted effects if your program is concerned with a single buffer.

 - Variable: semantic-dirty-token-hooks
     Hooks run after when a token is marked as dirty (edited by the
     user).  The functions must take TOKEN, START, and END as a
     parameters.  This hook will only be called once when a token is
     first made dirty, subsequent edits will not cause this to run a
     second time unless that token is first cleaned.  Any token marked
     as dirty will also be called with `semantic-clean-token-hooks',
     unless a full reprase is done instead.

 - Variable: semantic-clean-token-hooks
     Hooks run after a token is marked as clean (reparsed after user
     edits.)  The functions must take a TOKEN as a parameter.  Any
     token sent to this hook will have first been called with
     `semantic-dirty-token-hooks'.  This hook is not called for tokens
     marked dirty if the buffer is completely reparsed.  In that case,
     use `semantic-after-toplevel-bovinate-hook'.

 - Variable: semantic-change-hooks
     Hooks run when semantic detects a change in a buffer.  Each hook
     function must take three arguments, identical to the common hook
     `after-change-function'.

   Lastly, if you just want to know when a buffer changes, use this
hook.

 - Variable: semantic-after-toplevel-bovinate-hook
     Hooks run after a toplevel token parse.  It is not run if the
     toplevel parse command is called, and buffer does not need to be
     fully reparsed.  This function is also called when the toplevel
     cache is flushed, and the cache is emptied.  For language specific
     hooks, make sure you define this as a local hook.

 - Variable: semantic-before-toplevel-cache-flush-hook
     Hooks run before the toplevel nonterminal cache is flushed.  For
     language specific hooks, make sure you define this as a local hook.
     This hook is called before a corresponding
     `semantic-after-toplevel-bovinate-hook' which is also called
     during a flush when the cache is given a new value of nil.


File: semantic.info,  Node: Current Context,  Next: Tools,  Prev: Utilities,  Up: Top

Deriving the Current Context
****************************

   This chapter deals with how to derive the current context, and also
how a language maintainter can get the current context API to work with
their language.

   By default, the behavior will function in C like languages.  This
means languages with parenthetical blocks, and type dereferencing which
uses a similar form.

* Menu:

* Blocks::
* Local Variables::             Getting lists of local variables.
* Derived Context::             What goes at a given location?
* Suggestions::                 Get suggestions on one goes in a derived context.


File: semantic.info,  Node: Blocks,  Next: Local Variables,  Prev: Current Context,  Up: Current Context

Blocks and Navigation
=====================

   Source code is typically built up of control structures, and blocks
of context, or lexical scope.  Semantic terms these lexical scopes as a
"context".  The following functions can be used to navigate contexts.
Some of them are override functions.  Language authors can override a
subset of them to make them work for their language.

 - Function: semantic-up-context &optional point
     Move point up one context from POINT.  Return non-`nil' if there
     are no more context levels.  Overloaded functions using
     `up-context' take no parameters.

 - Function: semantic-beginning-of-context &optional point
     Move POINT to the beginning of the current context.  Return
     non-`nil' if there is no upper context.  The default behavior uses
     `semantic-up-context'.  It can be overridden with
     `beginning-of-context'.

 - Function: semantic-end-of-context &optional point
     Move POINT to the end of the current context.  Return non-`nil' if
     there is no upper context.  Be default, this uses
     `semantic-up-context', and assumes parenthetical block delimiters.
     This can be overridden with `end-of-context'.

   These next set of functions can be used to navigate across commands.

 - Function: semantic-end-of-command
     Move to the end of the current command.  Be default, uses
     `semantic-command-separation-character'.  Override with
     `end-of-command'.

 - Function: semantic-beginning-of-command
     Move to the beginning of the current command.  Be default, users
     `semantic-command-separation-character'.  Override with
     `beginning-of-command'.


File: semantic.info,  Node: Local Variables,  Next: Derived Context,  Prev: Blocks,  Up: Current Context

Deriving local variables
========================

   Within a given context, or block of code, local variables are often
defined.  These functions can be used to retrieve lists of locally
scoped variables.

 - Function: semantic-get-local-variables &optional point
     Get the local variables based on POINT's context.  Local variables
     are returned in Semantic token format.  Be default, this
     calculates the current bounds using context blocks navigation,
     then uses the parser with `bovine-inner-scope' to parse tokens at
     the beginning of the context.  This can be overriden with
     `get-local-variables'.

 - Function: semantic-get-local-arguments &optional point
     Get arguments (variables) from the current context at POINT.
     Parameters are available if the point is in a function or method.
     This function returns a list of tokens.  If the local token returns
     just a list of strings, then this function will convert them to
     tokens.  Part of this behavior can be overridden with
     `get-local-arguments'.

 - Function: semantic-get-all-local-variables &optional point
     Get all local variables for this context, and parent contexts.
     Local variables are returned in Semantic token format.  Be
     default, this gets local variables, and local arguments.  This can
     be overridden with `get-all-local-variables'.


File: semantic.info,  Node: Derived Context,  Next: Suggestions,  Prev: Local Variables,  Up: Current Context

Deriving the Current Context
============================

   While a context has already been used to describe blocks of code,
other context include more local details, such as the symbol the cursor
is on, or the fact we are assinging into some other variable.

   These context deriving functions can be overridden to provide
language specific behavior.  By default, it assumes a C like language.

 - Function: semantic-ctxt-current-symbol &optional point
     Return the current symbol the cursor is on at POINT in a list.
     This will include a list of type/field names when applicable.
     This can be overridden using `ctxt-current-symbol'.

 - Function: semantic-ctxt-current-assignment &optional point
     Return the current assignment near the cursor at POINT.  Return a
     list as per `semantic-ctxt-current-symbol'.  Return `nil' if there
     is nothing relevant.  Override with `ctxt-current-assignment'.

 - Function: semantic-ctxt-current-function &optional point
     Return the current symbol the cursor is on at POINT.  The function
     returned is the one accepting the arguments that the cursor is
     currently in.  This can be overridden with `ctxt.current-function'.

 - Function: semantic-ctxt-current-argument &optional point
     Return the current symbol the cursor is on at POINT.  Override
     with `ctxt-current-argument'.


File: semantic.info,  Node: Suggestions,  Prev: Derived Context,  Up: Current Context

Getting Suggestions for the Current Context
===========================================

   The suggestion API uses all the context deriving functions to make
intelligent guesses as to what belongs in a given location.  These
functions can be used to create smart completion mechanisms, or
displays.

   Unfortunatly, they are not fully implemented in Semantic 1.4.


File: semantic.info,  Node: Tools,  Next: Index,  Prev: Current Context,  Up: Top

Tools
*****

   Several tools come with Semantic which would not be possible without
it.  In general, these tools will work with any language supported by
Semantic.

* Menu:

* speedbar::                    How to use Semantic speedbar support
* imenu::                       Special support for Imenu.
* semanticdb::                  Cache your parsed buffers between sessions.
* senator::                     The Semantic Navigator
* document::                    Document generation functions
* miscellaneous::


File: semantic.info,  Node: speedbar,  Next: imenu,  Prev: Tools,  Up: Tools

Speedbar
========

   Speedbar supports the display of tags through the Semantic parser.
To use this utility, add a line like this to your `.emacs' file:

     (add-hook 'speedbar-load-hook (lambda () (require 'semantic-sb)))

   or you can simply add:

     (require 'semantic-sb)

   Once installed, speedbar will use semantic to find tokens, and will
display them appropriately.  Tags from semantic will have additional
details which can be seen, such as return type, or arguments to
functions.


File: semantic.info,  Node: imenu,  Next: semanticdb,  Prev: speedbar,  Up: Tools

Imenu support
=============

   There is special support for creating Imenu entries using semantic.
This is a highly customizable tool which can create specialized menu
systems for navigating your source file.

   By default, each language that wants special imenu support will set
itself up for it.  To setup imenu for your buffers, use this command in
your `.emacs' file:

     (add-hook 'semantic-init-hooks (lambda ()
                                    	   (imenu-add-to-menubar "TOKENS")))

   Also supported is "which-func-mode".  This usually uses imenu tags
to show the current function.  The semantic support for this function
uses overlays, which is much faster.

   You can customize imenu with the following options:

 - Option: semantic-imenu-summary-function
     Function to use when creating items in Imenu.  Some useful
     functions are: "semantic-abbreviate-nonterminal"
     "semantic-summarize-nonterminal" "semantic-prototype-nonterminal"

 - Option: semantic-imenu-bucketize-file
     Non-`nil' if tokens in a file are to be grouped into buckets.

 - Option: semantic-imenu-buckets-to-submenu
     Non-`nil' if buckets of tokens are to be turned into submenus.
     This option is ignored if `semantic-imenu-bucketize-file' is nil.

 - Option: semantic-imenu-expand-type-parts
     Non-`nil' if types should have submenus with parts in it.

 - Option: semantic-imenu-bucketize-type-parts
     Non-`nil' if elements of a type should be placed grouped into
     buckets.  `Nil' means to keep them in the same order.  Overriden
     to `nil' if `semantic-imenu-bucketize-file' is nil.

 - Option: semantic-imenu-sort-bucket-function
     Function to use when sorting tags in the buckets of functions.

 - Option: semantic-imenu-index-directory
     Non `nil' to index the entire directory for tags.  Doesn't
     actually parse the entire directory, but displays tags for all
     files currently listed in the current Semantic database.  This
     variable has no meaning if semanticdb is not active.

 - Option: semantic-imenu-auto-rebuild-directory-indexes
     If non-`nil' automatically rebuild directory index imenus.  That
     is when a directory index imenu is updated, automatically rebuild
     other buffer local ones based on the same semanticdb.

   When adding support to a language, this variable may need to be set:

 - Variable: semantic-imenu-expandable-token
     Tokens of this token type will be given submenu with children.  By
     default, a `type' has interesting children.  In Texinfo, however,
     a `section' has interesting children.


File: semantic.info,  Node: semanticdb,  Next: senator,  Prev: imenu,  Up: Tools

Semantic Database
=================

   Semanticdb is a utility which tracks your parsed files, and saves the
parsed information to files.  When you reload your source files,
semanticdb automatically associates the file with the cached copy,
saving time by not reparsing your buffer.

   Semanticdb also provides an API for programs to use.  These functions
will return token information without loading the source file into
memory by checking the disk cache.

   To use semanticdb, add the following to your `.emacs' file:

     (require 'semanticdb)
     (global-semanticdb-minor-mode 1)

   If you have a tool which optionally uses the semantic database, it
may be important to track if the database mode is turned on or off.

 - Option: semanticdb-mode-hooks
     Hooks run whenever "global-semanticdb-minor-mode" is run.  Use
     "semanticdb-minor-mode-p" to determine if the mode has been turned
     on or off.

 - Option: semanticdb-persistent-path
     List of valid paths that semanticdb will cache tokens to.  When
     "global-semanticdb-minor-mode" is active, token lists will be
     saved to disk when Emacs exits.  Not all directories will have
     tokens that should be saved.  The value should be a list of valid
     paths.  A path can be a string, indicating a directory in which to
     save a variable.  An element in the list can also be a symbol.
     Valid symbols are `never', which will disable any saving anywhere,
     `always', which enables saving everywhere, or `project', which
     enables saving in any directory that passes a list of predicates
     in `semantic-project-predicates'.

 - Option: semanticdb-project-roots
     List of directories, where each directory is the root of some
     project.  All subdirectories of a root project are considered a
     part of one project.  Values in this string can be overriden by
     project management programs via the
     `semanticdb-project-root-functions' variable.

   The important difference between these two is that you may put just
"~" in `semanticdb-persistent-path', but you may put individual project
directories into `semanticdb-project-roots' so that different database
lists don't get cross referenced incorrectly.

Searching
---------

   You can search for tokens in the database using the following
functions.

 - Function: semanticdb-find-nonterminal-by-name name &optional
          databases search-parts search-includes diff-mode
          find-file-match
     Find all occurances of nonterminals with name NAME in databases.
     See "semanticdb-find-nonterminal-by-function" for details on
     DATABASES, SEARCH-PARTS, SEARCH-INCLUDES, DIFF-MODE, and
     FIND-FILE-MATCH.

 - Function: semanticdb-find-nonterminal-by-name-regexp regex &optional
          databases search-parts search-includes diff-mode
          find-file-match
     Find all occurances of nonterminals with name matching REGEX in
     databases.  See "semanticdb-find-nonterminal-by-function" for
     details on DATABASES, SEARCH-PARTS, SEARCH-INCLUDES DIFF-MODE, and
     FIND-FILE-MATCH.

 - Function: semanticdb-find-nonterminal-by-type type &optional
          databases search-parts search-includes diff-mode
          find-file-match
     Find all nonterminals with a type of TYPE in databases.  See
     "semanticdb-find-nonterminal-by-function" for details on DATABASES,
     SEARCH-PARTS, SEARCH-INCLUDES DIFF-MODE, and FIND-FILE-MATCH.

 - Function: semanticdb-find-nonterminal-by-property property value
          &optional databases search-parts search-includes diff-mode
          find-file-match
     Find all nonterminals with a PROPERTY equal to VALUE in databases.
     See "semanticdb-find-nonterminal-by-function" for details on
     DATABASES, SEARCH-PARTS, SEARCH-INCLUDES DIFF-MODE, and
     FIND-FILE-MATCH.  Return a list ((DB-TABLE . TOKEN-LIST) ...).

 - Function: semanticdb-find-nonterminal-by-extra-spec spec &optional
          databases search-parts search-includes diff-mode
          find-file-match
     Find all nonterminals with a SPEC in databases.  See
     "semanticdb-find-nonterminal-by-function" for details on DATABASES,
     SEARCH-PARTS, SEARCH-INCLUDES DIFF-MODE, and FIND-FILE-MATCH.
     Return a list ((DB-TABLE . TOKEN-LIST) ...).

 - Function: semanticdb-find-nonterminal-by-extra-spec-value spec value
          &optional databases search-parts search-includes diff-mode
          find-file-match
     Find all nonterminals with a SPEC equal to VALUE in databases.
     See "semanticdb-find-nonterminal-by-function" for details on
     DATABASES, SEARCH-PARTS, SEARCH-INCLUDES DIFF-MODE, and
     FIND-FILE-MATCH.  Return a list ((DB-TABLE . TOKEN-LIST) ...).

 - Function: semanticdb-find-nonterminal-by-function function &optional
          databases search-parts search-includes diff-mode
          find-file-match
     Find all occurances of nonterminals which match FUNCTION.  Search
     in all DATABASES.  If DATABASES is `nil', search a range of
     associated databases.  When SEARCH-PARTS is non-`nil' the search
     will include children of tokens.  When SEARCH-INCLUDES is
     non-`nil', the search will include dependency files.  When
     DIFF-MODE is non-`nil', search databases which are of a different
     mode.  A Mode is the `major-mode' that file was in when it was
     last parsed.  When FIND-FILE-MATCH is non-`nil', the make sure any
     found token's file is in an Emacs buffer.

 - Function: semanticdb-file-stream file
     Return a list of tokens belonging to FILE.  If file has database
     tokens available in the database, return them.  If file does not
     have tokens available, then load the file, and create them.


File: semantic.info,  Node: senator,  Next: document,  Prev: semanticdb,  Up: Tools

Semantic Navigator
==================

   Senator stands for SEmantic NAvigaTOR and was written by David Ponce.

   This library defines commands and a minor mode to navigate between
semantic language tokens in the current buffer.

Commands
--------

   The following user level commands are provided by Senator.

Navigation
..........

 - Command: senator-next-token
     Move to the next token in the current buffer.

 - Command: senator-previous-token
     Move to the previous token in the current buffer.

 - Command: senator-jump sym
     Jump to the semantic symbol SYM.  If called interactively and a
     prefix argument is supplied jump in the local type's context (see
     function "senator-current-type-context").

Searching
.........

   Searching using senator mode restricts the search only to the
definition text, such as the name of the functions or variables in a
given buffer.

 - Command: senator-isearch-toggle-semantic-mode
     Toggles semantic search in isearch mode.  When semantic search is
     enabled, isearch is restricted to token names.

 - Command: senator-search-forward string
 - Command: senator-search-backward string
     Search forward and backward for a token matching STRING.

 - Command: re-search-forward regex
 - Command: re-search-backward regex
     Search forward and backward for a token matching the regular
     expression REGEX.

 - Command: word-search-forward word
 - word-search-backward: word
     Search forward and backward for a token whose name matches WORD.

Completion
..........

   Completion in senator scans all known definitions in the local file,
and uses that information to provide the completion.

 - Command: senator-complete-symbol
     Complete the current symbol under point.

 - Command: senator-completion-menu-keyboard-popup
     Popup a completion menu for the symbol at point.

Copy/Paste
..........

   Token Copy/Paste is a high level form of the typical copy yank used
by Emacs.  Copying a token saves the meta-information related to the
function or item the cursor is currently in.  When that information is
yanked into a new buffer, the form of the text created is based on the
current status of the programming buffer.

   For example, pasting a function into a different file results in a
function call template to be inserted.  In a Texinfo file, a @deffn is
created with documentation for that function or command.

 - Command: senator-copy-token
     Take the current token, and place it in the token ring.

 - Command: senator-kill-token
     Take the current token, place it in the token ring, and kill it.
     Killing the token removes the text for that token, and places it
     into the kill ring.  Retrieve that text with `yank'.

 - Command: senator-yank-token
     Yank a token from the token ring.  The form the token takes is
     differnet depending on where it is being yanked to.

 - Command: senator-copy-token-to-register register &optional kill-flag
     Copy the current token into REGISTER.  Optional argument KILL-FLAG
     will delete the text of the token to the kill ring.

   For programmers, to provide specialized pasting, created an override
function for `insert-foreign-token'. *Note Settings::.

Minor Mode
..........

 - Command: senator-minor-mode
     Toggle the SEmantic NAvigaTOR key bindings in the current buffer.

     The following default key bindings are provided when semantic minor
     mode is enabled:

    <C-c , n>
          senator-next-token

    <C-c , p>
          senator-previous-token

    <C-c , i>
          senator-isearch-toggle-semantic-mode

    <C-c , j>
          senator-jump

    <C-c , TAB>
          senator-complete-symbol

    <C-c , SPC>
          senator-completion-menu-keyboard-popup

    <C-c , C-y>
          senator-yank-token

    <C-c , C-w>
          senator-kill-token

    <C-c , M-w>
          senator-copy-token

    <C-c ,>

Customization
-------------

   To enable the Senator keymap in all modes that support semantic
parsing, use this:

     (add-hook 'semantic-init-hooks 'senator-minor-mode)

   To customize navigation around different types of tokens, use the
following variables:

 - Option: senator-step-at-token-ids
     List of token identifiers where to step.  Token identifier is
     symbol `'variable', `'function', `'type', or other.  If `nil'
     navigation steps at any token found.  This is a buffer local
     variable.  It can be set in a mode hook to get a specific language
     navigation.

 - Option: senator-step-at-start-end-token-ids
     List of token identifiers where to step at start and end.  Token
     identifier is symbol `'variable', `'function', `'type', or other.
     If `nil' navigation only step at beginning of tokens.  If `t' step
     at start and end of any token where it is allowed to step.  Also,
     stepping at start and end of a token prevent stepping inside its
     children.  This is a buffer local variable.  It can be set in a
     mode hook to get a specific language navigation.

   To have a mode specific customization, do something like this in a
hook:

     (add-hook 'mode-hook
               (lambda ()
                 (setq senator-step-at-token-ids '(function variable))
                 (setq senator-step-at-start-end-token-ids '(function))
                 ))

   This will cause navigation and search commands to stop only between
functions and variables, and to step at start and end of functions only.

Contact information for Senator
-------------------------------

   Any comments, suggestions, bug reports or upgrade requests are
welcome.  Please send them to David Ponce at david@dponce.com


File: semantic.info,  Node: document,  Next: miscellaneous,  Prev: senator,  Up: Tools

Document generation
===================

   The document program uses semantic token streams to aid in the
creation of texinfo documentation.  The main entry point for the
documentation generator are the following commands:

 - Command: document &optional resetfile
     Document the function or variable the cursor is in.  Optional
     argument RESETFILE is provided w/ universal argument.  When
     non-`nil', query for a new documentation file.

 - Command: document-inline
     Document the current function with an inline comment.

 - Command: document-insert-defun-comment nonterm buffer
     Insert mode-comment documentation about NONTERM from BUFFER.

 - Command: document-insert-new-file-header header
     Insert a new header file into this buffer.  Add reference to
     HEADER.  Used by `prototype' if this file doesn't have an
     introductory comment.

   In addition to these base documentation commands, the texinfo
semantic parser includes a two convenience functions when working
directly with texinfo files.

 - Command: semantic-texi-update-doc &optional token
     Update the documentation for TOKEN.  If the current buffer is a
     texinfo file, then find the source doc, and update it.  If the
     current buffer is a source file, then get the documentation for
     this item, find the existing doc in the associated manual, and
     update that.

 - Command: semantic-texi-goto-source &optional token
     Jump to the source for the definition in the texinfo file TOKEN.
     If TOKEN is `nil', it is derived from the deffn under POINT.


File: semantic.info,  Node: miscellaneous,  Prev: document,  Up: Tools

Miscellaneous commands
======================

 - Command: semantic-show-dirty-mode arg
     Toggle highlighting of dirty tokens.  When optional argument ARG
     is negative, disable this mode.  A positive argument enables it.
     If ARG is nil, toggle.

     When active, tokens in the current buffer marked "dirty" are
     highlighted.  A token is considered dirty if the token was
     generated before the most recent change to that token's text.


File: semantic.info,  Node: Index,  Prev: Tools,  Up: Top

Index
*****

Function Index
**************

* Menu:

* bovinate:                              Compiling.
* bovinate-debug:                        Debugging.
* document:                              document.
* document-inline:                       document.
* document-insert-defun-comment:         document.
* document-insert-new-file-header:       document.
* re-search-backward:                    senator.
* re-search-forward:                     senator.
* semantic-abbreviate-nonterminal:       Token->Text.
* semantic-beginning-of-command <1>:     Blocks.
* semantic-beginning-of-command:         Local Context.
* semantic-beginning-of-context <1>:     Blocks.
* semantic-beginning-of-context:         Local Context.
* semantic-bovinate-debug-set-table:     Debugging.
* semantic-bovinate-toplevel:            Compiling.
* semantic-bovine-toplevel-full-reparse-needed-p: Parser Hooks.
* semantic-bovine-toplevel-partial-reparse-needed-p: Parser Hooks.
* semantic-clear-toplevel-cache:         Compiling.
* semantic-concise-prototype-nonterminal: Token->Text.
* semantic-ctxt-current-argument <1>:    Derived Context.
* semantic-ctxt-current-argument:        Local Context.
* semantic-ctxt-current-assignment <1>:  Derived Context.
* semantic-ctxt-current-assignment:      Local Context.
* semantic-ctxt-current-function <1>:    Derived Context.
* semantic-ctxt-current-function:        Local Context.
* semantic-ctxt-current-symbol <1>:      Derived Context.
* semantic-ctxt-current-symbol:          Local Context.
* semantic-current-nonterminal:          Nonterminal Streams.
* semantic-current-nonterminal-parent:   Nonterminal Streams.
* semantic-end-of-command <1>:           Blocks.
* semantic-end-of-command:               Local Context.
* semantic-end-of-context <1>:           Blocks.
* semantic-end-of-context:               Local Context.
* semantic-find-dependency:              Token Details.
* semantic-find-documentation:           Token Details.
* semantic-find-innermost-nonterminal-by-position: Nonterminal Streams.
* semantic-find-nonterminal:             Token Details.
* semantic-find-nonterminal-by-extra-spec: Nonterminal Streams.
* semantic-find-nonterminal-by-extra-spec-value: Nonterminal Streams.
* semantic-find-nonterminal-by-function: Nonterminal Streams.
* semantic-find-nonterminal-by-function-first-match: Nonterminal Streams.
* semantic-find-nonterminal-by-name:     Nonterminal Streams.
* semantic-find-nonterminal-by-overlay:  Nonterminal Streams.
* semantic-find-nonterminal-by-overlay-in-region: Nonterminal Streams.
* semantic-find-nonterminal-by-position: Nonterminal Streams.
* semantic-find-nonterminal-by-property: Nonterminal Streams.
* semantic-find-nonterminal-by-token:    Nonterminal Streams.
* semantic-find-nonterminal-by-type:     Nonterminal Streams.
* semantic-find-nonterminal-standard:    Nonterminal Streams.
* semantic-flex-keyword-get:             Lexing.
* semantic-flex-keyword-p:               Lexing.
* semantic-flex-keyword-put:             Lexing.
* semantic-flex-keywords:                Lexing.
* semantic-flex-map-keywords:            Lexing.
* semantic-get-all-local-variables <1>:  Local Variables.
* semantic-get-all-local-variables:      Local Context.
* semantic-get-local-arguments <1>:      Local Variables.
* semantic-get-local-arguments:          Local Context.
* semantic-get-local-variables <1>:      Local Variables.
* semantic-get-local-variables:          Local Context.
* semantic-imenu-auto-rebuild-directory-indexes: imenu.
* semantic-imenu-bucketize-file:         imenu.
* semantic-imenu-bucketize-type-parts:   imenu.
* semantic-imenu-buckets-to-submenu:     imenu.
* semantic-imenu-expand-type-parts:      imenu.
* semantic-imenu-index-directory:        imenu.
* semantic-imenu-sort-bucket-function:   imenu.
* semantic-imenu-summary-function:       imenu.
* semantic-name-nonterminal:             Token->Text.
* semantic-nonterminal-children:         Token Details.
* semantic-nonterminal-protection:       Token Details.
* semantic-prototype-file:               Token->Text.
* semantic-prototype-nonterminal:        Token->Text.
* semantic-read-function:                Nonterminal Completion.
* semantic-read-symbol:                  Nonterminal Completion.
* semantic-read-type:                    Nonterminal Completion.
* semantic-read-variable:                Nonterminal Completion.
* semantic-recursive-find-nonterminal-by-name: Nonterminal Streams.
* semantic-show-dirty-mode:              miscellaneous.
* semantic-suggest-lookup-item:          Local Context.
* semantic-suggest-variable-token-hierarchy: Local Context.
* semantic-summarize-nonterminal:        Token->Text.
* semantic-texi-goto-source:             document.
* semantic-texi-update-doc:              document.
* semantic-token-docstring:              Token Queries.
* semantic-token-end:                    Token Queries.
* semantic-token-extent:                 Token Queries.
* semantic-token-extra-spec:             Token Queries.
* semantic-token-function-args:          Token Queries.
* semantic-token-function-destructor:    Token Queries.
* semantic-token-function-extra-spec:    Token Queries.
* semantic-token-function-extra-specs:   Token Queries.
* semantic-token-function-modifiers:     Token Queries.
* semantic-token-function-parent:        Token Queries.
* semantic-token-function-throws:        Token Queries.
* semantic-token-get:                    Token Queries.
* semantic-token-include-system:         Token Queries.
* semantic-token-name:                   Token Queries.
* semantic-token-overlay:                Token Queries.
* semantic-token-put:                    Token Queries.
* semantic-token-start:                  Token Queries.
* semantic-token-token:                  Token Queries.
* semantic-token-type:                   Token Queries.
* semantic-token-type-extra-spec:        Token Queries.
* semantic-token-type-extra-specs:       Token Queries.
* semantic-token-type-modifiers:         Token Queries.
* semantic-token-type-parent:            Token Queries.
* semantic-token-type-parent-implement:  Token Queries.
* semantic-token-type-parent-superclass: Token Queries.
* semantic-token-type-parts:             Token Queries.
* semantic-token-variable-const:         Token Queries.
* semantic-token-variable-default:       Token Queries.
* semantic-token-variable-extra-spec:    Token Queries.
* semantic-token-variable-extra-specs:   Token Queries.
* semantic-token-variable-modifiers:     Token Queries.
* semantic-uml-abbreviate-nonterminal:   Token->Text.
* semantic-up-context <1>:               Blocks.
* semantic-up-context:                   Local Context.
* semanticdb-file-stream:                semanticdb.
* semanticdb-find-nonterminal-by-extra-spec: semanticdb.
* semanticdb-find-nonterminal-by-extra-spec-value: semanticdb.
* semanticdb-find-nonterminal-by-function: semanticdb.
* semanticdb-find-nonterminal-by-name:   semanticdb.
* semanticdb-find-nonterminal-by-name-regexp: semanticdb.
* semanticdb-find-nonterminal-by-property: semanticdb.
* semanticdb-find-nonterminal-by-type:   semanticdb.
* semanticdb-mode-hooks:                 semanticdb.
* semanticdb-persistent-path:            semanticdb.
* semanticdb-project-roots:              semanticdb.
* senator-complete-symbol:               senator.
* senator-completion-menu-keyboard-popup: senator.
* senator-copy-token:                    senator.
* senator-copy-token-to-register:        senator.
* senator-isearch-toggle-semantic-mode:  senator.
* senator-jump:                          senator.
* senator-kill-token:                    senator.
* senator-minor-mode:                    senator.
* senator-next-token:                    senator.
* senator-previous-token:                senator.
* senator-search-backward:               senator.
* senator-search-forward:                senator.
* senator-step-at-start-end-token-ids:   senator.
* senator-step-at-token-ids:             senator.
* senator-yank-token:                    senator.
* word:                                  senator.
* word-search-forward:                   senator.


